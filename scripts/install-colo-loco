#!/usr/bin/env node

const fs = require("fs")

const help = process.argv.includes("-h") || process.argv.includes("--help")

if (help) {
  console.log(" React Native Colo Loco ðŸ¤ª\n")
  console.log("    This script automates the installation of React Native Colo Loco")
  console.log("    which allows you to colocate your native files with your JavaScript files.\n")
  console.log(" Usage: npx install-colo-loco or yarn install-colo-loco\n")
  console.log(" Command options:")
  console.log("    --defaults         Use the defaults (App name, Source folder and Package name.")
  console.log("    -h, --help         Print usage info.")
  console.log("    --skip-git-check   Skip git working tree (install with dirty git working tree).")
  process.exit(0)
}

// get the app name, source folder, and package name from command-line arguments
const readline = require("readline")

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

const noGitCheck = process.argv.includes("--no-git-check")

let appName, sourceFolder, packageName

// check if their git working tree is dirty
if (!noGitCheck && isGitDirty()) {
  console.error("Your git working tree is dirty.")

  rl.question("Are you sure you want to continue? [y/N] ", function (answer) {
    // start setup if user wants to continue and exit if not
    if (answer.toLowerCase() === "y" || answer.toLowerCase() === "yes") {
      startSetup()
    } else {
      console.error("Please commit or stash your changes and re-run the script.")
      process.exit(1)
    }
  })
} else {
  // start if git working working tree is clean or user passed the --no-git-check flag
  startSetup()
}

function startSetup() {
  // get the app name, source folder, and package name from command-line arguments
  const defaults = process.argv.includes("--defaults")
  const appJSON = JSON.parse(fs.readFileSync(process.cwd() + "/app.json"))
  const packageJSON = JSON.parse(fs.readFileSync(process.cwd() + "/package.json"))

  const defaultAppName = pascalCase(appJSON?.name || appJSON?.expo?.name || packageJSON.name || "MyApp")

  // look for existing folders, or default to 'app'
  let defaultSourceFolder = firstExistingFolder(["app", "src", "App", "source", "Source"]) || "app"

  const defaultPackageName = `com.${defaultAppName.toLowerCase()}`

  appName = defaultAppName
  sourceFolder = defaultSourceFolder
  packageName = defaultPackageName

  console.log("Setting up React Native Colo Loco!")

  // if we're not using the `--defaults` flag, ask the user for the app name, source folder, and package name
  if (!defaults) {
    // ask the user for the app name
    rl.question(`App name? [${defaultAppName}] `, function (userAppName) {
      // ask the user for the source folder
      rl.question(`Source folder? [${defaultSourceFolder}] `, function (userSourceFolder) {
        // ask the user for the app package name
        rl.question(`App package name? [${defaultPackageName}] `, function (userPackageName) {
          appName = userAppName || defaultAppName
          sourceFolder = userSourceFolder || defaultSourceFolder
          packageName = userPackageName || defaultPackageName

          rl.close()
        })
      })
    })
    rl.on("close", setupColoLoco)
  } else {
    setupColoLoco()
  }
}

function setupColoLoco() {
  console.log(`Setting up React Native Colo Loco for ${appName} in ${sourceFolder}`)

  setupIOS(appName, sourceFolder, packageName)

  setupAndroid(appName, sourceFolder, packageName)

  console.log("")
  console.log(" ðŸ¤ª React Native Colo Loco is now installed!")
  console.log("    â€¢ Next, run `npx pod-install` to link up any iOS native files.")
  console.log("    â€¢ When you run `yarn android`, our script will link any Android native files.")
  console.log("    â€¢ To enable Swift, follow the directions in the React Native docs")
  console.log("      https://reactnative.dev/docs/native-modules-ios#exporting-swift")
  console.log("    â€¢ To enable Kotlin, it's a bit more involved, but you can start here:")
  console.log("      https://github.com/infinitered/DiveIntoNativeUpdate#android")
  console.log("")

  process.exit(0)
}

function setupIOS(appName, sourceFolder, _packageName) {
  // read the Podfile
  const podfileContents = fs.readFileSync(process.cwd() + "/ios/Podfile")
  // does the Podfile already have Colo Loco?
  const podfileHasColoLoco = podfileContents.indexOf("colo-loco") > -1
  if (!podfileHasColoLoco) {
    const coloLocoPodfileContents = `
# React Native Colo Loco autolinks native files colocated next to your JS files
# More info here: https://github.com/jamonholmgren/react-native-colo-loco
require File.join(File.dirname(\`node --print "require.resolve('react-native-colo-loco/package.json')"\`), "../scripts/ios.rb")
link_colocated_native_files(
  app_name: '${appName}',
  app_path: "../${sourceFolder}",
  exclude_targets: ['${appName}Tests']
)
`

    // prepend the cololoco setup string
    const podfile = `${coloLocoPodfileContents}\n\n${podfileContents.toString()}`
    // write the Podfile
    fs.writeFileSync(process.cwd() + "/ios/Podfile", podfile)
  } else {
    console.log("React Native Colo Loco already set up in Podfile")
  }
}

function setupAndroid(appName, sourceFolder, packageName) {
  // read the settings.gradle file
  const settingsGradleContents = fs.readFileSync(process.cwd() + "/android/settings.gradle")

  // this is where we'll be doing the bulk of our work
  const androidPath = `./android/app/src/main/java/${packageName.split(".").join("/")}`

  // does the settings.gradle already have Colo Loco?
  const settingsGradleHasColoLoco = settingsGradleContents.indexOf("colo-loco") > -1
  if (!settingsGradleHasColoLoco) {
    const coloLocoSettingsGradleContents = `
// React Native Colo Loco autolinks native files colocated next to your JS files
// More info here: https://github.com/jamonholmgren/react-native-colo-loco
apply from: new File(["node", "--print", "require.resolve('react-native-colo-loco/package.json')"].execute(null, rootDir).text.trim(), "../scripts/android.groovy")
linkColocatedNativeFiles([
  appName: "${appName}",
  appPath: "../${sourceFolder}",
  appPackageName: "${packageName}",
  androidPath: "${androidPath}"
])
`

    // prepend the cololoco setup string
    const settingsGradle = `${coloLocoSettingsGradleContents}\n\n${settingsGradleContents.toString()}`

    // write the settings.gradle
    fs.writeFileSync(process.cwd() + "/android/settings.gradle", settingsGradle)
  } else {
    console.log("React Native Colo Loco already set up in settings.gradle")
  }

  // create MyAppPackage.java
  const myAppPackagePath = `${androidPath}/${appName}Package.java`

  // does MyAppPackage.java already exist?
  if (!fs.existsSync(myAppPackagePath)) {
    const myAppPackageContents = `
// ./android/app/src/main/java/com/myapp/${appName}Package.java
package ${packageName};
import com.facebook.react.ReactPackage;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.uimanager.ViewManager;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ${appName}Package implements ReactPackage {
    @Override
    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
      List<ViewManager> modules = new ArrayList<>();

      // Add all react-native-colo-loco view managers from ./colocated/ColoLoco.java
      modules.addAll(ColoLoco.colocatedViewManagers(reactContext));

      return modules;
    }

    @Override
    public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
      List<NativeModule> modules = new ArrayList<>();

      // Add all react-native-colo-loco modules from ./colocated/ColoLoco.java
      modules.addAll(ColoLoco.colocatedModules(reactContext));

      return modules;
    }
}
`
    // write the MyAppPackage.java
    fs.writeFileSync(myAppPackagePath, myAppPackageContents)
  } else {
    console.log(`${appName}Package.java already exists`)
  }

  // update MainApplication.java to include MyAppPackage.java
  const packageInitString = `packages.add(new ${appName}Package());`

  const mainApplicationPath = `${androidPath}/MainApplication.java`
  const mainApplicationContents = fs.readFileSync(mainApplicationPath)
  const packageInitExists = mainApplicationContents.indexOf(packageInitString) > -1
  if (!packageInitExists) {
    const mainApplication = mainApplicationContents.toString()
    const newMainApplicationContents = mainApplication.replace(
      `return packages;`,
      `${packageInitString}\n\n          return packages;`
    )
    fs.writeFileSync(mainApplicationPath, newMainApplicationContents)
  } else {
    console.log(`MainApplication.java already includes ${appName}Package.java`)
  }
}

function firstExistingFolder(folders) {
  return folders.find((folder) => {
    return fs.existsSync(folder)
  })
}

function isGitDirty() {
  const output = require("child_process").spawnSync("git", ["status", "--porcelain"])
  if (output.status === 0) {
    return output.stdout.toString().trim().length > 0
  }
}

// function to pascalcase a string
function pascalCase(str) {
  if (typeof str !== "string") return str

  return str
    .split("-")
    .map((part) => {
      return part.charAt(0).toUpperCase() + part.slice(1)
    })
    .join("")
}
